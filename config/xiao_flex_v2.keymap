/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define SYM 1
#define NUM 2
#define NAV 3
#define FUN 4

/* Global settings */

#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp SQT         &kp Q  &kp W  &kp D          &kp F     &kp K             &kp J     &kp U      &kp R        &kp L    &kp SEMI  &kp MINUS
&mt LCTRL ESC   &kp A  &kp S  &kp E          &kp T     &kp G             &kp Y     &kp N      &kp I        &kp O    &kp H     &kp EQUAL
&mt LSHFT LPAR  &kp Z  &kp X  &kp C          &kp V     &kp B             &kp P     &kp M      &kp COMMA    &kp DOT  &kp FSLH  &mt RSHIFT RPAR
                              &lt SYM SPACE  &kp BSPC  &mt LGUI GRAVE    &kp LALT  &lt 3 TAB  &lt 2 ENTER
            >;
        };

        sym_layer {
            bindings = <
&trans      &trans    &kp LBRC  &kp RBRC  &kp EQUAL  &trans      &trans     &kp PLUS   &kp LBKT   &kp RBKT  &trans    &trans
&trans      &kp EXCL  &kp AT    &kp HASH  &kp PRCNT  &kp DLLR    &kp CARET  &kp AMPS   &kp STAR   &kp BSLH  &kp PIPE  &trans
&caps_word  &trans    &trans    &trans    &kp UNDER  &kp SQT     &kp DQT    &kp MINUS  &kp LT     &kp GT    &trans    &trans
                                &trans    &trans     &trans      &kp LPAR   &kp RPAR   &kp UNDER
            >;
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &trans   &trans   &trans     &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6     &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12    &kp N0  &kp N7  &kp N8  &kp N9  &trans  &trans
                        &trans   &trans   &trans     &trans  &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans        &trans        &trans        &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans  &trans        &trans        &trans        &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans        &trans        &trans        &trans  &trans    &trans    &trans  &trans     &trans
                        &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE    &trans  &trans    &trans
            >;
        };

        sys_layer {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &bootloader     &bootloader  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &sys_reset      &sys_reset   &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SYS {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
